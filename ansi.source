#apt install ncurses ncurses_utils



if [ "${ANSI_LOADED}" = "" ]; then
    declare -A COLOR
    declare -A BACKGROUND
    declare -A STYLE
    declare -A SEPARATOR

    trap 'screen_onResize' WINCH
    tput_cmd=$(which tput)
    
    if [ -x ${tput_cmd} ] && tput setaf 1 &> /dev/null; then
        COLOR['black']=$(tput setaf 0)
        COLOR['red']=$(tput setaf 1)
        COLOR['green']=$(tput setaf 2)
        COLOR['yellow']=$(tput setaf 3)
        COLOR['blue']=$(tput setaf 4)
        COLOR['magenta']=$(tput setaf 5)
        COLOR['cyan']=$(tput setaf 6)
        COLOR['white']=$(tput setaf 7)
        #Light colors
        COLOR['blackl']=$(tput setaf 8)
        COLOR['redl']=$(tput setaf 9)
        COLOR['greenl']=$(tput setaf 10)
        COLOR['yellow'l]=$(tput setaf 11)
        COLOR['bluel']=$(tput setaf 12)
        COLOR['magental']=$(tput setaf 13)
        COLOR['cyanl']=$(tput setaf 14)
        COLOR['whitel']=$(tput setaf 15)

        BACKGROUND['black']=$(tput setaf 0)
        BACKGROUND['red']=$(tput setaf 1)
        BACKGROUND['green']=$(tput setaf 2)
        BACKGROUND['yellow']=$(tput setaf 3)
        BACKGROUND['blue']=$(tput setaf 4)
        BACKGROUND['magenta']=$(tput setaf 5)
        BACKGROUND['cyan']=$(tput setaf 6)
        BACKGROUND['white']=$(tput setaf 7)
        #Light background colors
        BACKGROUND['blackl']=$(tput setaf 8)
        BACKGROUND['redl']=$(tput setaf 9)
        BACKGROUND['greenl']=$(tput setaf 10)
        BACKGROUND['yellowl']=$(tput setaf 11)
        BACKGROUND['bluel']=$(tput setaf 12)
        BACKGROUND['magental']=$(tput setaf 13)
        BACKGROUND['cyanl']=$(tput setaf 14)
        BACKGROUND['whitel']=$(tput setaf 15)

        STYLE['normal']=$(tput sgr0)
        STYLE['bold']=$(tput bold)
        STYLE['dim']=$(tput dim)
        STYLE['under']=$(tput smul)
        STYLE['reverse']=$(tput rev)
        STYLE['standout']=$(tput smso)
        STYLE['dlob']=${STYLE['normal']}
        STYLE['mid']=${STYLE['normal']}
        STYLE['rednu']=$(tput rmul)
        STYLE['esrever']=${STYLE['normal']}
        STYLE['tuodnats']=$(tput rmso)
    else
        STYLE['normal']="\e[0m"
        STYLE['bold']="\e[1m"
        STYLE['dim']='\e[2m'
        STYLE['under']='\e[4m'
        STYLE['blink']='\e[5m'
        STYLE['reverse']='\e[7m'
        STYLE['hidden']='\e[8m'
        STYLE['dlob']="\e[21m"
        STYLE['min']='\e[22m'
        STYLE['rednu']='\e[24m'
        STYLE['knilb']='\e[25m'
        STYLE['esrever']='\e[27m'
        STYLE['neddih']='\e[28m'
        
        COLOR['black']='\e[1;30m'
        COLOR['red']='\e[1;31m'
        COLOR['green']='\e[1;32m'
        COLOR['yellow']='\e[1;33m' 
        COLOR['blue']='\e[1;34m'
        COLOR['magenta']='\e[1;35m'
        COLOR['cyan']='\e[1;36m'
        COLOR['white']='\e[1;37m'
        
        BACKGROUND['black']='\e[1;40m'
        BACKGROUND['red']='\e[1;41m'
        BACKGROUND['green']='\e[1;42m'
        BACKGROUND['yellow']='\e[1;43m' 
        BACKGROUND['blue']='\e[1;44m'
        BACKGROUND['magenta']='\e[1;45m'
        BACKGROUND['cyan']='\e[1;46m'
        BACKGROUND['white']='\e[1;47m'        
    fi
fi

ansi_demo() {
    printTitle 'Color demo' ${COLOR['white']}
    printf "${COLOR['red']}Red "
    printf "${COLOR['green']}Green "
    printf "${COLOR['yellow']}Yellow "
    printf "${COLOR['blue']}Blue "
    printf "${COLOR['magenta']}Magenta "
    printf "${COLOR['cyan']}Cyan "
    printf "${COLOR['white']}White${STYLE['normal']}\n"
    
    printf "${COLOR['redl']}Red "
    printf "${COLOR['greenl']}Green "
    printf "${COLOR['yellowl']}Yellow "
    printf "${COLOR['bluel']}Blue "
    printf "${COLOR['magental']}Magenta "
    printf "${COLOR['cyanl']}Cyan "
    printf "${COLOR['whitel']}White${STYLE['normal']}\n"
    
    printf "${STYLE['bold']}Bold${STYLE['dlob']} "
    printf "${STYLE['dim']}Dim${STYLE['mid']} "
    printf "${STYLE['under']}Underline${STYLE['rednu']} "
    printf "${STYLE['reverse']}Reverse${STYLE['esrever']} "
    printf "${STYLE['standout']}Standout${STYLE['tuodnats']} "
    
    printf "${STYLE['normal']}\n\n"
}

hideCursor() {
    tput civis
}

showCursor() {
    tput cnorm
}


printSeparator() {
    printf "${SEPARATOR_UNDERLINE}\n"
}

printTitle() {
    local width=$(tput cols)
    tput el1
    printf "${2}"
    printf ${SEPARATOR['top']}
    printf "\u2503 %-$(($width-3))s\u2503" "${1}"
    printf ${SEPARATOR['bottom']}
}

screen_onResize() {
    local separator=''
    ROWS=`tput lines`
    COLS=$(( $(tput cols) - 2 ))
    for i in `seq 1 $COLS`; do
        separator="${separator}\u2501"
    done
    SEPARATOR['top']="\u250f${separator}\u2513"
    SEPARATOR['normal']="\u2501${separator}\u2501"
    SEPARATOR['bottom']="\u2517${separator}\u251b"
    return 0
}

if [ "${ANSI_LOADED}" = "" ]; then
    ANSI_LOADED="true"
    screen_onResize
    printSeparator
fi